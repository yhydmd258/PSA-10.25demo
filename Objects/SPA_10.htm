<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\SPA_10.25demo]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\SPA_10.25demo</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Thu May 21 14:51:21 2020
<BR><P>
<H3>Maximum Stack Usage =        672 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Bsp_If_Init &rArr; CTP_If_Touch_Init &rArr; CTP_Ctrl_Touch_Init &rArr; init_touch_app &rArr; init_touch_driver &rArr; read_uint16_t &rArr; read_mem &rArr; i2c_master_read &rArr; I2C_MasterReadWait &rArr; I2C_ReadOneByte
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[47]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[7]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">HardFault_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SysTick_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1b]">ACMP0_IRQHandler</a> from acmp.o(i.ACMP0_IRQHandler) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[20]">ACMP1_IRQHandler</a> from acmp.o(i.ACMP1_IRQHandler) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[1a]">ADC_IRQHandler</a> from adc.o(i.ADC_IRQHandler) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[1c]">FTM0_IRQHandler</a> from ftm.o(i.FTM0_IRQHandler) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[1d]">FTM1_IRQHandler</a> from ftm.o(i.FTM1_IRQHandler) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[1e]">FTM2_IRQHandler</a> from ftm.o(i.FTM2_IRQHandler) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[10]">FTMRE_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[13]">I2C0_IRQHandler</a> from i2c.o(i.I2C0_IRQHandler) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[14]">I2C1_IRQHandler</a> from i2c.o(i.I2C1_IRQHandler) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[26]">ICS_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[12]">IRQ_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[23]">KBI0_IRQHandler</a> from kbi.o(i.KBI0_IRQHandler) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[24]">KBI1_IRQHandler</a> from kbi.o(i.KBI1_IRQHandler) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[29]">MSCAN_RX_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[2a]">MSCAN_TX_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[21]">PIT_CH0_IRQHandler</a> from pit.o(i.PIT_CH0_IRQHandler) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[22]">PIT_CH1_IRQHandler</a> from pit.o(i.PIT_CH1_IRQHandler) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[11]">PMC_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[28]">PWT_IRQHandler</a> from pwt.o(i.PWT_IRQHandler) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[1f]">RTC_IRQHandler</a> from rtc.o(i.RTC_IRQHandler) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[b]">Reserved16_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[c]">Reserved17_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[d]">Reserved18_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[e]">Reserved19_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[f]">Reserved20_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[25]">Reserved42_IRQHandler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[15]">SPI0_IRQHandler</a> from spi.o(i.SPI0_IRQHandler) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[16]">SPI1_IRQHandler</a> from spi.o(i.SPI1_IRQHandler) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[2b]">SystemInit</a> from system_skeaz1284.o(i.SystemInit) referenced from startup_skeaz1284.o(.text)
 <LI><a href="#[17]">UART0_IRQHandler</a> from deserialize_uart.o(i.UART0_IRQHandler) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[18]">UART1_IRQHandler</a> from uart.o(i.UART1_IRQHandler) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[19]">UART2_IRQHandler</a> from uart.o(i.UART2_IRQHandler) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[27]">WDOG_IRQHandler</a> from wdog.o(i.WDOG_IRQHandler) referenced from startup_skeaz1284.o(RESET)
 <LI><a href="#[2f]">__main</a> from __main.o(!!!main) referenced from startup_skeaz1284.o(.text)
 <LI><a href="#[2c]">init_data_bss</a> from startup_skeaz1284.o(.text) referenced from startup_skeaz1284.o(.text)
 <LI><a href="#[2e]">message_handler</a> from atmel_1189.o(i.message_handler) referenced from atmel_1189.o(i.init_touch_app)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2f]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[30]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[32]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[b7]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[b8]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[33]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[b9]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[37]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[ba]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[bb]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[bc]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[bd]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[be]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[bf]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[c0]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[c1]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[c2]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[c3]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[c4]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[c5]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[c6]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[c7]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[c8]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[c9]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[ca]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[cb]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[cc]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[cd]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[ce]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[3c]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[cf]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[d0]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[d1]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[d2]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[d3]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[d4]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[d5]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[31]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[d6]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[34]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[36]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[d7]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[38]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Bsp_If_Init &rArr; CTP_If_Touch_Init &rArr; CTP_Ctrl_Touch_Init &rArr; init_touch_app &rArr; init_touch_driver &rArr; read_uint16_t &rArr; read_mem &rArr; i2c_master_read &rArr; I2C_MasterReadWait &rArr; I2C_ReadOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[d8]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[49]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3b]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[d9]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[3d]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[41]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_touch_driver
</UL>

<P><STRONG><a name="[da]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[2c]"></a>init_data_bss</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(.text)
</UL>
<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultISR
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefaultISR
</UL>

<P><STRONG><a name="[10]"></a>FTMRE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>ICS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>IRQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>MSCAN_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>MSCAN_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>Reserved16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>Reserved17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>Reserved18_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>Reserved19_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>Reserved20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>Reserved42_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_skeaz1284.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_skeaz1284.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[40]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_Data_Cmd_make
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_touch_message_for_PSA
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_address
</UL>

<P><STRONG><a name="[db]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[42]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[44]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_Ctrl_Init
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[dc]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_Ctrl_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_touch_driver
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[de]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetBaudRate
</UL>

<P><STRONG><a name="[df]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_Data_Cmd_make
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_touch_message_for_PSA
</UL>

<P><STRONG><a name="[e0]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[3a]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[e5]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[e6]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1b]"></a>ACMP0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, acmp.o(i.ACMP0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ACMP0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[e7]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[20]"></a>ACMP1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, acmp.o(i.ACMP1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ACMP1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>ADC_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, adc.o(i.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>Bsp_If_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_if.o(i.Bsp_If_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = Bsp_If_Init &rArr; CTP_If_Touch_Init &rArr; CTP_Ctrl_Touch_Init &rArr; init_touch_app &rArr; init_touch_driver &rArr; read_uint16_t &rArr; read_mem &rArr; i2c_master_read &rArr; I2C_MasterReadWait &rArr; I2C_ReadOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_If_Init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_If_Init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deserialize_If_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_If_Touch_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_If_Init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_If_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>CTP_Ctrl_Cmd_Make</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ctp_ctrl.o(i.CTP_Ctrl_Cmd_Make))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CTP_Ctrl_Cmd_Make &rArr; CTP_Data_Cmd_make &rArr; CTP_Ctrl_Cmd_Send &rArr; CTP_If_Cmd_Send &rArr; Deserialize_If_Cmd_Send &rArr; Deserialize_Ctrl_Cmd_Send &rArr; Deserialize_Data_Send &rArr; Deserialize_UART_Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_Data_Cmd_make
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_If_Task
</UL>

<P><STRONG><a name="[53]"></a>CTP_Ctrl_Cmd_Send</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ctp_ctrl.o(i.CTP_Ctrl_Cmd_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CTP_Ctrl_Cmd_Send &rArr; CTP_If_Cmd_Send &rArr; Deserialize_If_Cmd_Send &rArr; Deserialize_Ctrl_Cmd_Send &rArr; Deserialize_Data_Send &rArr; Deserialize_UART_Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_If_Cmd_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_Data_Cmd_make
</UL>

<P><STRONG><a name="[55]"></a>CTP_Ctrl_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ctp_ctrl.o(i.CTP_Ctrl_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CTP_Ctrl_Init &rArr; CTP_Data_Init &rArr; I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_Data_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_If_Init
</UL>

<P><STRONG><a name="[57]"></a>CTP_Ctrl_Task</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ctp_ctrl.o(i.CTP_Ctrl_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CTP_Ctrl_Task &rArr; get_touch_message_for_PSA &rArr; I2C_MasterSendWait &rArr; I2C_WriteOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_touch_message_for_PSA
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLineStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_If_Task
</UL>

<P><STRONG><a name="[5a]"></a>CTP_Ctrl_Touch_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ctp_ctrl.o(i.CTP_Ctrl_Touch_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = CTP_Ctrl_Touch_Init &rArr; init_touch_app &rArr; init_touch_driver &rArr; read_uint16_t &rArr; read_mem &rArr; i2c_master_read &rArr; I2C_MasterReadWait &rArr; I2C_ReadOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_touch_app
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_message
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeLineStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_If_Touch_Init
</UL>

<P><STRONG><a name="[52]"></a>CTP_Data_Cmd_make</STRONG> (Thumb, 476 bytes, Stack size 48 bytes, ctp_data.o(i.CTP_Data_Cmd_make))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CTP_Data_Cmd_make &rArr; CTP_Ctrl_Cmd_Send &rArr; CTP_If_Cmd_Send &rArr; Deserialize_If_Cmd_Send &rArr; Deserialize_Ctrl_Cmd_Send &rArr; Deserialize_Data_Send &rArr; Deserialize_UART_Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_Ctrl_Cmd_Send
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_Ctrl_Cmd_Make
</UL>

<P><STRONG><a name="[56]"></a>CTP_Data_Init</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ctp_data.o(i.CTP_Data_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CTP_Data_Init &rArr; I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Interrupt
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_Data_GPIO_Cfg
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_Data_Enable_CHG
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_Ctrl_Init
</UL>

<P><STRONG><a name="[54]"></a>CTP_If_Cmd_Send</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ctp_if.o(i.CTP_If_Cmd_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CTP_If_Cmd_Send &rArr; Deserialize_If_Cmd_Send &rArr; Deserialize_Ctrl_Cmd_Send &rArr; Deserialize_Data_Send &rArr; Deserialize_UART_Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deserialize_If_Cmd_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_Ctrl_Cmd_Send
</UL>

<P><STRONG><a name="[4b]"></a>CTP_If_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ctp_if.o(i.CTP_If_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CTP_If_Init &rArr; CTP_Ctrl_Init &rArr; CTP_Data_Init &rArr; I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_Ctrl_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_If_Init
</UL>

<P><STRONG><a name="[64]"></a>CTP_If_Task</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ctp_if.o(i.CTP_If_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CTP_If_Task &rArr; CTP_Ctrl_Cmd_Make &rArr; CTP_Data_Cmd_make &rArr; CTP_Ctrl_Cmd_Send &rArr; CTP_If_Cmd_Send &rArr; Deserialize_If_Cmd_Send &rArr; Deserialize_Ctrl_Cmd_Send &rArr; Deserialize_Data_Send &rArr; Deserialize_UART_Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_Ctrl_Task
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_Ctrl_Cmd_Make
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4f]"></a>CTP_If_Touch_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ctp_if.o(i.CTP_If_Touch_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = CTP_If_Touch_Init &rArr; CTP_Ctrl_Touch_Init &rArr; init_touch_app &rArr; init_touch_driver &rArr; read_uint16_t &rArr; read_mem &rArr; i2c_master_read &rArr; I2C_MasterReadWait &rArr; I2C_ReadOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_Ctrl_Touch_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_If_Init
</UL>

<P><STRONG><a name="[58]"></a>ChangeLineStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, atmel_1189.o(i.ChangeLineStatus))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_Ctrl_Touch_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_Ctrl_Task
</UL>

<P><STRONG><a name="[b6]"></a>Clk_Init</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, clk.o(i.Clk_Init))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>Deserialize_Ctrl_Backlight_Flag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, deserialize_ctrl.o(i.Deserialize_Ctrl_Backlight_Flag))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deserialize_If_Backlight_Flag
</UL>

<P><STRONG><a name="[70]"></a>Deserialize_Ctrl_Backlight_Flag_update</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, deserialize_ctrl.o(i.Deserialize_Ctrl_Backlight_Flag_update))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deserialize_If_Backlight_Flag_update
</UL>

<P><STRONG><a name="[65]"></a>Deserialize_Ctrl_Cmd_Send</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, deserialize_ctrl.o(i.Deserialize_Ctrl_Cmd_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Deserialize_Ctrl_Cmd_Send &rArr; Deserialize_Data_Send &rArr; Deserialize_UART_Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deserialize_Data_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deserialize_If_Cmd_Send
</UL>

<P><STRONG><a name="[72]"></a>Deserialize_Ctrl_Get_Backlight</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, deserialize_ctrl.o(i.Deserialize_Ctrl_Get_Backlight))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deserialize_If_Get_Backlight
</UL>

<P><STRONG><a name="[67]"></a>Deserialize_Ctrl_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, deserialize_ctrl.o(i.Deserialize_Ctrl_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Deserialize_Ctrl_Init &rArr; Deserialize_Data_Init &rArr; Deserialize_UART_Init &rArr; UART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deserialize_Data_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deserialize_If_Init
</UL>

<P><STRONG><a name="[68]"></a>Deserialize_Data_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, deserialize_data.o(i.Deserialize_Data_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Deserialize_Data_Init &rArr; Deserialize_UART_Init &rArr; UART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deserialize_UART_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deserialize_Data_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deserialize_Ctrl_Init
</UL>

<P><STRONG><a name="[66]"></a>Deserialize_Data_Send</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, deserialize_data.o(i.Deserialize_Data_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Deserialize_Data_Send &rArr; Deserialize_UART_Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deserialize_UART_Send_Data
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deserialize_Data_Set_Cds
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deserialize_Ctrl_Cmd_Send
</UL>

<P><STRONG><a name="[a7]"></a>Deserialize_Data_Set_Backlight</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, deserialize_data.o(i.Deserialize_Data_Set_Backlight))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[6b]"></a>Deserialize_Data_Set_Cds</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, deserialize_data.o(i.Deserialize_Data_Set_Cds))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deserialize_Data_Send
</UL>

<P><STRONG><a name="[6d]"></a>Deserialize_If_Backlight_Flag</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, deserialize_if.o(i.Deserialize_If_Backlight_Flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Deserialize_If_Backlight_Flag
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deserialize_Ctrl_Backlight_Flag
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_If_Task
</UL>

<P><STRONG><a name="[6f]"></a>Deserialize_If_Backlight_Flag_update</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, deserialize_if.o(i.Deserialize_If_Backlight_Flag_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Deserialize_If_Backlight_Flag_update
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deserialize_Ctrl_Backlight_Flag_update
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_If_Task
</UL>

<P><STRONG><a name="[63]"></a>Deserialize_If_Cmd_Send</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, deserialize_if.o(i.Deserialize_If_Cmd_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Deserialize_If_Cmd_Send &rArr; Deserialize_Ctrl_Cmd_Send &rArr; Deserialize_Data_Send &rArr; Deserialize_UART_Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deserialize_Ctrl_Cmd_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_If_Cmd_Send
</UL>

<P><STRONG><a name="[71]"></a>Deserialize_If_Get_Backlight</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, deserialize_if.o(i.Deserialize_If_Get_Backlight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Deserialize_If_Get_Backlight
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deserialize_Ctrl_Get_Backlight
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_If_Task
</UL>

<P><STRONG><a name="[4c]"></a>Deserialize_If_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, deserialize_if.o(i.Deserialize_If_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Deserialize_If_Init &rArr; Deserialize_Ctrl_Init &rArr; Deserialize_Data_Init &rArr; Deserialize_UART_Init &rArr; UART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deserialize_Ctrl_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_If_Init
</UL>

<P><STRONG><a name="[69]"></a>Deserialize_UART_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, deserialize_uart.o(i.Deserialize_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Deserialize_UART_Init &rArr; UART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deserialize_Data_Init
</UL>

<P><STRONG><a name="[6c]"></a>Deserialize_UART_Send_Data</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, deserialize_uart.o(i.Deserialize_UART_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Deserialize_UART_Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deserialize_Data_Send
</UL>

<P><STRONG><a name="[62]"></a>Disable_Interrupt</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, nvic.o(i.Disable_Interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IntDisable
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_Data_Init
</UL>

<P><STRONG><a name="[76]"></a>Enable_Interrupt</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nvic.o(i.Enable_Interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IntEnable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_ChannelInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[1c]"></a>FTM0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ftm.o(i.FTM0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FTM0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>FTM1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ftm.o(i.FTM1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FTM1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>FTM2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ftm.o(i.FTM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FTM2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>FTM_ChannelInit</STRONG> (Thumb, 502 bytes, Stack size 32 bytes, ftm.o(i.FTM_ChannelInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FTM_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_Ctrl_Init
</UL>

<P><STRONG><a name="[77]"></a>FTM_Ctrl_Init</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, ftm_ctrl.o(i.FTM_Ctrl_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = FTM_Ctrl_Init &rArr; FTM_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_ChannelInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_If_Init
</UL>

<P><STRONG><a name="[7a]"></a>FTM_Ctrl_Set_LED_PWM</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ftm_ctrl.o(i.FTM_Ctrl_Set_LED_PWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FTM_Ctrl_Set_LED_PWM &rArr; FTM_SetChannelValue
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_SetChannelValue
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_If_Set_LED_PWM
</UL>

<P><STRONG><a name="[4e]"></a>FTM_If_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ftm_if.o(i.FTM_If_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = FTM_If_Init &rArr; FTM_Ctrl_Init &rArr; FTM_ChannelInit
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_Ctrl_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_If_Init
</UL>

<P><STRONG><a name="[7c]"></a>FTM_If_Set_LED_PWM</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ftm_if.o(i.FTM_If_Set_LED_PWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FTM_If_Set_LED_PWM &rArr; FTM_Ctrl_Set_LED_PWM &rArr; FTM_SetChannelValue
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_Ctrl_Set_LED_PWM
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_If_Task
</UL>

<P><STRONG><a name="[79]"></a>FTM_Init</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, ftm.o(i.FTM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FTM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_Ctrl_Init
</UL>

<P><STRONG><a name="[13]"></a>I2C0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, i2c.o(i.I2C0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>I2C1_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, i2c.o(i.I2C1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>I2C_Init</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetSlaveAddress
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetSCLLowTimeout
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_Data_Init
</UL>

<P><STRONG><a name="[80]"></a>I2C_IntDisable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, i2c.o(i.I2C_IntDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_IntDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_touch_message_for_PSA
</UL>

<P><STRONG><a name="[81]"></a>I2C_IntEnable</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, i2c.o(i.I2C_IntEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_IntEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_touch_message_for_PSA
</UL>

<P><STRONG><a name="[82]"></a>I2C_MasterReadWait</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, i2c.o(i.I2C_MasterReadWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_MasterReadWait &rArr; I2C_ReadOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteOneByte
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_read
</UL>

<P><STRONG><a name="[87]"></a>I2C_MasterSendWait</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, i2c.o(i.I2C_MasterSendWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_MasterSendWait &rArr; I2C_WriteOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteOneByte
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_write
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_touch_message_for_PSA
</UL>

<P><STRONG><a name="[85]"></a>I2C_ReadOneByte</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, i2c.o(i.I2C_ReadOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_ReadOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendAck
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RxEnable
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetStatus
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReadWait
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_touch_message_for_PSA
</UL>

<P><STRONG><a name="[7f]"></a>I2C_SetSCLLowTimeout</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c.o(i.I2C_SetSCLLowTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[7e]"></a>I2C_SetSlaveAddress</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, i2c.o(i.I2C_SetSlaveAddress))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[83]"></a>I2C_Start</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, i2c.o(i.I2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TxEnable
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterSendWait
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReadWait
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_touch_message_for_PSA
</UL>

<P><STRONG><a name="[86]"></a>I2C_Stop</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, i2c.o(i.I2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterSendWait
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReadWait
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_touch_message_for_PSA
</UL>

<P><STRONG><a name="[84]"></a>I2C_WriteOneByte</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, i2c.o(i.I2C_WriteOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WriteOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TxEnable
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetStatus
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterSendWait
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReadWait
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_touch_message_for_PSA
</UL>

<P><STRONG><a name="[23]"></a>KBI0_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, kbi.o(i.KBI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KBI0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>KBI1_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, kbi.o(i.KBI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KBI1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>LCD_Ctrl_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd_ctrl.o(i.LCD_Ctrl_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_Ctrl_Init &rArr; LCD_Data_Init &rArr; SPI_Init &rArr; SPI_SetBaudRate
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Data_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Data_GPIO_Standby_High
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Ctrl_Register_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_If_Init
</UL>

<P><STRONG><a name="[8f]"></a>LCD_Ctrl_Register_Set</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lcd_ctrl.o(i.LCD_Ctrl_Register_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_Ctrl_Register_Set &rArr; LCD_Data_Register_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Data_Register_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Ctrl_Init
</UL>

<P><STRONG><a name="[90]"></a>LCD_Data_GPIO_Standby_High</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lcd_data.o(i.LCD_Data_GPIO_Standby_High))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Ctrl_Init
</UL>

<P><STRONG><a name="[8e]"></a>LCD_Data_Init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lcd_data.o(i.LCD_Data_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD_Data_Init &rArr; SPI_Init &rArr; SPI_SetBaudRate
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Data_GPIO_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Data_Cs_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Ctrl_Init
</UL>

<P><STRONG><a name="[91]"></a>LCD_Data_Register_Write</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, lcd_data.o(i.LCD_Data_Register_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_Data_Register_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteDataReg
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IsSPTEF
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IsSPRF
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_BidirOutEnable
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_If_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Ctrl_Register_Set
</UL>

<P><STRONG><a name="[4d]"></a>LCD_If_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lcd_if.o(i.LCD_If_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD_If_Init &rArr; LCD_Ctrl_Init &rArr; LCD_Data_Init &rArr; SPI_Init &rArr; SPI_SetBaudRate
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Ctrl_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_If_Init
</UL>

<P><STRONG><a name="[9a]"></a>LED_Ctrl_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, led_ctrl.o(i.LED_Ctrl_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LED_Ctrl_Init &rArr; LED_Data_I2C_Init &rArr; LED_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Data_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_If_Init
</UL>

<P><STRONG><a name="[9b]"></a>LED_Data_I2C_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, led_data.o(i.LED_Data_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LED_Data_I2C_Init &rArr; LED_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Ctrl_Init
</UL>

<P><STRONG><a name="[9c]"></a>LED_I2C_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, led_i2c.o(i.LED_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_I2C_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Data_I2C_Init
</UL>

<P><STRONG><a name="[50]"></a>LED_If_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, led_if.o(i.LED_If_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED_If_Init &rArr; LED_Ctrl_Init &rArr; LED_Data_I2C_Init &rArr; LED_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Ctrl_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_If_Init
</UL>

<P><STRONG><a name="[9e]"></a>LED_If_Task</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, led_if.o(i.LED_If_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED_If_Task &rArr; FTM_If_Set_LED_PWM &rArr; FTM_Ctrl_Set_LED_PWM &rArr; FTM_SetChannelValue
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_If_Set_LED_PWM
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deserialize_If_Get_Backlight
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deserialize_If_Backlight_Flag_update
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deserialize_If_Backlight_Flag
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21]"></a>PIT_CH0_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pit.o(i.PIT_CH0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIT_CH0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_ChannelClrFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>PIT_CH1_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pit.o(i.PIT_CH1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIT_CH1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_ChannelClrFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>PWT_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pwt.o(i.PWT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWT_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RTC_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtc.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClrFlags
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SPI0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, spi.o(i.SPI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SPI1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, spi.o(i.SPI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>SPI_Init</STRONG> (Thumb, 430 bytes, Stack size 16 bytes, spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_Init &rArr; SPI_SetBaudRate
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Interrupt
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetBaudRate
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetClockPol
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetClockPhase
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ModfEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Data_Init
</UL>

<P><STRONG><a name="[a4]"></a>SPI_SetBaudRate</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, spi.o(i.SPI_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_SetBaudRate
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[2b]"></a>SystemInit</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, system_skeaz1284.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(.text)
</UL>
<P><STRONG><a name="[95]"></a>Timer_If_Delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer_if.o(i.Timer_If_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Data_Register_Write
</UL>

<P><STRONG><a name="[17]"></a>UART0_IRQHandler</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, deserialize_uart.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0_GetChar
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deserialize_Data_Set_Backlight
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>UART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>UART2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.UART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>UART_Init</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Interrupt
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deserialize_UART_Init
</UL>

<P><STRONG><a name="[27]"></a>WDOG_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wdog.o(i.WDOG_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WDOG_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_skeaz1284.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, atmel_1189.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_Data_Cmd_make
</UL>

<P><STRONG><a name="[a8]"></a>address_slave</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, atmel_1189.o(i.address_slave))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = address_slave &rArr; i2c_master_read &rArr; I2C_MasterReadWait &rArr; I2C_ReadOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_read
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_touch_driver
</UL>

<P><STRONG><a name="[b1]"></a>get_build_number</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, atmel_1189.o(i.get_build_number))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_touch_app
</UL>

<P><STRONG><a name="[ae]"></a>get_family_id</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, atmel_1189.o(i.get_family_id))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_touch_app
</UL>

<P><STRONG><a name="[b2]"></a>get_max_report_id</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, atmel_1189.o(i.get_max_report_id))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_touch_app
</UL>

<P><STRONG><a name="[5c]"></a>get_message</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, atmel_1189.o(i.get_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = get_message &rArr; read_mem &rArr; i2c_master_read &rArr; I2C_MasterReadWait &rArr; I2C_ReadOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_Ctrl_Touch_Init
</UL>

<P><STRONG><a name="[ab]"></a>get_object_address</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, atmel_1189.o(i.get_object_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = get_object_address &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_touch_driver
</UL>

<P><STRONG><a name="[59]"></a>get_touch_message_for_PSA</STRONG> (Thumb, 292 bytes, Stack size 48 bytes, atmel_1189.o(i.get_touch_message_for_PSA))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = get_touch_message_for_PSA &rArr; I2C_MasterSendWait &rArr; I2C_WriteOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteOneByte
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadOneByte
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterSendWait
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IntEnable
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IntDisable
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_Ctrl_Task
</UL>

<P><STRONG><a name="[af]"></a>get_variant_id</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, atmel_1189.o(i.get_variant_id))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_touch_app
</UL>

<P><STRONG><a name="[b0]"></a>get_version</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, atmel_1189.o(i.get_version))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_touch_app
</UL>

<P><STRONG><a name="[a9]"></a>i2c_master_read</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, atmel_1189.o(i.i2c_master_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = i2c_master_read &rArr; I2C_MasterReadWait &rArr; I2C_ReadOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReadWait
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mem
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_slave
</UL>

<P><STRONG><a name="[ac]"></a>i2c_master_write</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, atmel_1189.o(i.i2c_master_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = i2c_master_write &rArr; I2C_MasterSendWait &rArr; I2C_WriteOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterSendWait
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mem
</UL>

<P><STRONG><a name="[5b]"></a>init_touch_app</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, atmel_1189.o(i.init_touch_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = init_touch_app &rArr; init_touch_driver &rArr; read_uint16_t &rArr; read_mem &rArr; i2c_master_read &rArr; I2C_MasterReadWait &rArr; I2C_ReadOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_id_to_type
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_touch_driver
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_version
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_variant_id
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_max_report_id
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_family_id
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_build_number
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_Ctrl_Touch_Init
</UL>

<P><STRONG><a name="[ad]"></a>init_touch_driver</STRONG> (Thumb, 650 bytes, Stack size 448 bytes, atmel_1189.o(i.init_touch_driver))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = init_touch_driver &rArr; read_uint16_t &rArr; read_mem &rArr; i2c_master_read &rArr; I2C_MasterReadWait &rArr; I2C_ReadOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_uint16_t
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mem
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_id_block
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_object_address
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_slave
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_touch_app
</UL>

<P><STRONG><a name="[39]"></a>main</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = main &rArr; Bsp_If_Init &rArr; CTP_If_Touch_Init &rArr; CTP_Ctrl_Touch_Init &rArr; init_touch_app &rArr; init_touch_driver &rArr; read_uint16_t &rArr; read_mem &rArr; i2c_master_read &rArr; I2C_MasterReadWait &rArr; I2C_ReadOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_If_Task
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clk_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_If_Task
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bsp_If_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[2e]"></a>message_handler</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, atmel_1189.o(i.message_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = message_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> atmel_1189.o(i.init_touch_app)
</UL>
<P><STRONG><a name="[b4]"></a>read_id_block</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, atmel_1189.o(i.read_id_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = read_id_block &rArr; read_mem &rArr; i2c_master_read &rArr; I2C_MasterReadWait &rArr; I2C_ReadOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_touch_driver
</UL>

<P><STRONG><a name="[aa]"></a>read_mem</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, atmel_1189.o(i.read_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = read_mem &rArr; i2c_master_read &rArr; I2C_MasterReadWait &rArr; I2C_ReadOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_write
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_read
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_uint16_t
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_id_block
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_touch_driver
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_message
</UL>

<P><STRONG><a name="[b5]"></a>read_uint16_t</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atmel_1189.o(i.read_uint16_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = read_uint16_t &rArr; read_mem &rArr; i2c_master_read &rArr; I2C_MasterReadWait &rArr; I2C_ReadOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_touch_driver
</UL>

<P><STRONG><a name="[b3]"></a>report_id_to_type</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, atmel_1189.o(i.report_id_to_type))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_touch_app
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[7d]"></a>I2C_ClearStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c.o(i.I2C_ClearStatus))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteOneByte
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadOneByte
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_IRQHandler
</UL>

<P><STRONG><a name="[88]"></a>I2C_GetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2c.o(i.I2C_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteOneByte
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadOneByte
</UL>

<P><STRONG><a name="[8c]"></a>I2C_IsBusy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(i.I2C_IsBusy))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>

<P><STRONG><a name="[89]"></a>I2C_RxEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(i.I2C_RxEnable))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadOneByte
</UL>

<P><STRONG><a name="[8a]"></a>I2C_SendAck</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(i.I2C_SendAck))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadOneByte
</UL>

<P><STRONG><a name="[8b]"></a>I2C_TxEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(i.I2C_TxEnable))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteOneByte
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>

<P><STRONG><a name="[9f]"></a>PIT_ChannelClrFlags</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pit.o(i.PIT_ChannelClrFlags))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_CH1_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_CH0_IRQHandler
</UL>

<P><STRONG><a name="[a0]"></a>RTC_ClrFlags</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rtc.o(i.RTC_ClrFlags))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[a3]"></a>SPI_ModfEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi.o(i.SPI_ModfEnable))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[a2]"></a>SPI_SetClockPhase</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, spi.o(i.SPI_SetClockPhase))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[a1]"></a>SPI_SetClockPol</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, spi.o(i.SPI_SetClockPol))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[94]"></a>LCD_Data_Cs_Init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lcd_data.o(i.LCD_Data_Cs_Init))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Data_Init
</UL>

<P><STRONG><a name="[92]"></a>LCD_Data_GPIO_Init</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, lcd_data.o(i.LCD_Data_GPIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Data_Init
</UL>

<P><STRONG><a name="[96]"></a>SPI_BidirOutEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd_data.o(i.SPI_BidirOutEnable))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Data_Register_Write
</UL>

<P><STRONG><a name="[99]"></a>SPI_IsSPRF</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd_data.o(i.SPI_IsSPRF))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Data_Register_Write
</UL>

<P><STRONG><a name="[97]"></a>SPI_IsSPTEF</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd_data.o(i.SPI_IsSPTEF))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Data_Register_Write
</UL>

<P><STRONG><a name="[98]"></a>SPI_WriteDataReg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcd_data.o(i.SPI_WriteDataReg))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Data_Register_Write
</UL>

<P><STRONG><a name="[9d]"></a>LED_I2C_GPIO_Init</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, led_i2c.o(i.LED_I2C_GPIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_I2C_Init
</UL>

<P><STRONG><a name="[7b]"></a>FTM_SetChannelValue</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, ftm_ctrl.o(i.FTM_SetChannelValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FTM_SetChannelValue
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTM_Ctrl_Set_LED_PWM
</UL>

<P><STRONG><a name="[6a]"></a>Deserialize_Data_GPIO_Init</STRONG> (Thumb, 328 bytes, Stack size 0 bytes, deserialize_data.o(i.Deserialize_Data_GPIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deserialize_Data_Init
</UL>

<P><STRONG><a name="[a6]"></a>Uart0_GetChar</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, deserialize_uart.o(i.Uart0_GetChar))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[74]"></a>Uart0_SendChar</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, deserialize_uart.o(i.Uart0_SendChar))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deserialize_UART_Send_Data
</UL>

<P><STRONG><a name="[60]"></a>CTP_Data_Enable_CHG</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ctp_data.o(i.CTP_Data_Enable_CHG))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_Data_Init
</UL>

<P><STRONG><a name="[5f]"></a>CTP_Data_GPIO_Cfg</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, ctp_data.o(i.CTP_Data_GPIO_Cfg))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_Data_Init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
